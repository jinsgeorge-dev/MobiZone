// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductCatalog.Domain.DataBase;

namespace ProductCatalog.Domain.Migrations
{
    [DbContext(typeof(CatalogDBContext))]
    [Migration("20220506114122_SecondCatalog")]
    partial class SecondCatalog
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ProductCatalog.Domain.Cart.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedBy")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateUtc");

                    b.Property<int>("LookUpId")
                        .HasColumnType("int")
                        .HasColumnName("LookUpId");

                    b.Property<DateTime>("ModifiedBy")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("ModifiedOnUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateUtc");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LookUpId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Customers.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateUtc");

                    b.Property<string>("ForgotToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ForgotToken");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("ModifiedOnUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateUtc");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Customers.UserDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("LastName");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Order.CatalogOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedBy")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdDateUtc");

                    b.Property<int>("LookUpId")
                        .HasColumnType("int")
                        .HasColumnName("LookUpId");

                    b.Property<DateTime>("ModifiedBy")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("ModifiedOnUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateUtc");

                    b.Property<int>("OrderDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailsId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId1");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<int>("product_id")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("LookUpId");

                    b.HasIndex("OrderDetailsId");

                    b.HasIndex("ProductId");

                    b.ToTable("CatalogOrder");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Order.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAtUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateUtc");

                    b.Property<DateTime>("CreatedBy")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("ModifiedAtUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateUtc");

                    b.Property<DateTime>("ModifiedBy")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedBy");

                    b.Property<int?>("PaymentDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("TotalAmount");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<int>("paymentID")
                        .HasColumnType("int")
                        .HasColumnName("PaymentId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentDetailsId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Order.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<int?>("CatalogOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateUtc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Createdby");

                    b.Property<DateTime>("ModifiedAtUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdetedDateUtc");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdetedBy");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("OrderStatus");

                    b.HasKey("Id");

                    b.HasIndex("CatalogOrderId");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Order.PaymentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Decimal(12,3)")
                        .HasColumnName("Amount");

                    b.Property<int?>("CatalogOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateUtc");

                    b.Property<DateTime>("CreatedBy")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("ModifiedAtUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedDateUtc");

                    b.Property<DateTime>("ModifiedBy")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedBy");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PaymentStatus");

                    b.HasKey("Id");

                    b.HasIndex("CatalogOrderId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Products.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedBy")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("Varchar(300)")
                        .HasColumnName("image_url");

                    b.Property<DateTime>("ModifiedBy")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("ModifiedOnUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_on_utc");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Products.LookUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentId");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("LookUp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ParentId = 0,
                            name = "ProductType"
                        },
                        new
                        {
                            Id = 2,
                            ParentId = 0,
                            name = "ProductBrand"
                        },
                        new
                        {
                            Id = 3,
                            ParentId = 0,
                            name = "Color"
                        },
                        new
                        {
                            Id = 4,
                            ParentId = 0,
                            name = "Storage"
                        },
                        new
                        {
                            Id = 5,
                            ParentId = 0,
                            name = "SimType"
                        },
                        new
                        {
                            Id = 6,
                            ParentId = 0,
                            name = "OperatingSystem"
                        },
                        new
                        {
                            Id = 7,
                            ParentId = 0,
                            name = "ProcessorType"
                        },
                        new
                        {
                            Id = 8,
                            ParentId = 0,
                            name = "ProcessorCore"
                        },
                        new
                        {
                            Id = 9,
                            ParentId = 0,
                            name = "PrimaryCamera"
                        });
                });

            modelBuilder.Entity("ProductCatalog.Domain.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<int>("AvailableStock")
                        .HasColumnType("int")
                        .HasColumnName("AvailableStock");

                    b.Property<DateTime>("CreatedBy")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedOnUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdDateUtc");

                    b.Property<DateTime>("DeletedOnUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedByUtc");

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("IsActive");

                    b.Property<int>("LookUpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedBy")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTime>("ModifiedOnUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("Decimal(12,3)")
                        .HasColumnName("Price");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationId");

                    b.HasKey("Id");

                    b.HasIndex("LookUpId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Products.Specification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<string>("DisplaySize")
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("DisplaySize");

                    b.Property<string>("DisplayType")
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("DisplayType");

                    b.Property<string>("HybridSlot")
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("HybridSlot");

                    b.Property<string>("OsSupported")
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("OsSupported");

                    b.Property<string>("OtherFeatures")
                        .HasColumnType("Varchar(500)")
                        .HasColumnName("OtherFeatures");

                    b.Property<string>("Resolution")
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("Resolution");

                    b.Property<string>("ResolutionType")
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("ResolutionType");

                    b.Property<string>("SimType")
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("SimType");

                    b.Property<string>("SystemRequirement")
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("SystemRequirement");

                    b.Property<string>("Version")
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("Version");

                    b.HasKey("Id");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Role.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAtUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateUtc");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("ModifiedAtUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateUtc");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("UpdatedBy");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("Roles");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Cart.CartItem", b =>
                {
                    b.HasOne("ProductCatalog.Domain.Products.LookUp", "LookUp")
                        .WithMany()
                        .HasForeignKey("LookUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductCatalog.Domain.Customers.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUp");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Customers.User", b =>
                {
                    b.HasOne("ProductCatalog.Domain.Role.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Customers.UserDetails", b =>
                {
                    b.HasOne("ProductCatalog.Domain.Customers.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Order.CatalogOrder", b =>
                {
                    b.HasOne("ProductCatalog.Domain.Products.LookUp", "LookUp")
                        .WithMany()
                        .HasForeignKey("LookUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductCatalog.Domain.Order.OrderDetails", "OrderDetails")
                        .WithMany()
                        .HasForeignKey("OrderDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductCatalog.Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("LookUp");

                    b.Navigation("OrderDetails");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Order.OrderDetails", b =>
                {
                    b.HasOne("ProductCatalog.Domain.Order.PaymentDetails", "PaymentDetails")
                        .WithMany()
                        .HasForeignKey("PaymentDetailsId");

                    b.HasOne("ProductCatalog.Domain.Customers.User", "Users")
                        .WithMany("OrderDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentDetails");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Order.OrderStatus", b =>
                {
                    b.HasOne("ProductCatalog.Domain.Order.CatalogOrder", "CatalogOrder")
                        .WithMany()
                        .HasForeignKey("CatalogOrderId");

                    b.Navigation("CatalogOrder");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Order.PaymentDetails", b =>
                {
                    b.HasOne("ProductCatalog.Domain.Order.CatalogOrder", "CatalogOrder")
                        .WithMany()
                        .HasForeignKey("CatalogOrderId");

                    b.Navigation("CatalogOrder");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Products.Image", b =>
                {
                    b.HasOne("ProductCatalog.Domain.Products.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Products.Product", b =>
                {
                    b.HasOne("ProductCatalog.Domain.Products.LookUp", "LookUp")
                        .WithMany()
                        .HasForeignKey("LookUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductCatalog.Domain.Products.Specification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookUp");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Customers.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Products.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
